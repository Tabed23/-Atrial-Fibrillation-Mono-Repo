from time import sleep
import numpy as np
import pandas as pd

class Afib:

    def __init__(self, *args, **kwargs):
        self.df = pd.read_csv('coorteeqsrafva.csv', sep=';', header=0, index_col=0)
        pd.options.display.max_columns = None
        self.afib_df= None

    def print_read_data(self):
        print(self.afib_df.head())
    
    # define a function to recode age
    def get_age_group(self, age):
        age_group = ''
        if (age >=0 and age <=9):
            age_group = '0-9 Years'
        elif (age >= 10 and age <=19):
            age_group = '10-19 Years'
        elif (age >=20 and age <= 29):
            age_group = '20-29 Years'
        elif (age >=30 and age <= 39):
            age_group = '30-39 Years'
        elif (age >= 40 and age <= 49):
            age_group = '40-49 Years'
        elif (age >= 50 and age <= 59):
            age_group = '50-59 Years'
        elif (age >= 60 and age <= 69):
            age_group = '60-69 Years'
        elif (age >= 70 and age <= 79):
            age_group = '70-79 Years'
        elif (age >= 80):
            age_group = '80+ Years'
        else:
            age_group = 'Missing'
        return age_group
# define a function to recode height    
    def get_height_group(self, height):
        height_group = ''
        if (height < 150.0):
            height_group = '<1.50m'
        elif (height >= 150.0 and height <= 159.9):
            height_group = '1.50m +'
        elif (height >= 160.0 and height <= 169.9):
            height_group = '1.60m +'
        elif (height >= 170.0 and height <= 179.9):
            height_group = '1.70m +'
        elif (height >= 180.0 and height <= 189.9):
            height_group = '1.80m +'
        elif (height >= 190.0 and height <= 199.9):
            height_group = '1.90m +'
        else: 
            height_group = 'Missing'
        return height_group

    # define a function to recode weight
    def get_weight_group(self, weight):
        weight_group = ''
        if (weight < 60.0):
            weight_group = '<60kg'
        elif (weight >= 60.0 and weight <= 69.9):
            weight_group = '60kg +'
        elif (weight >= 70.0 and weight <= 79.9):
            weight_group = '70kg +'
        elif (weight >= 80.0 and weight <= 89.9):
            weight_group = '80kg +'
        elif (weight >= 90.0 and weight <= 99.9):
            weight_group = '90kg +'
        elif (weight >= 100.0):
            weight_group = '100kg +'
        else: 
            weight_group = 'Missing'
        return weight_group

    def formate_data(self):
        self.afib_df = self.df
        self.afib_df = self.afib_df.drop(columns=['ecg_id', 'patient_id', 'nurse', 'site', 'device', 'report', 'scp_codes', 'infarction_stadium1', 'infarction_stadium2', 'validated_by', 'second_opinion', 'initial_autogenerated_report', 'baseline_drift', 'static_noise', 'burst_noise', 'electrodes_problems', 'extra_beats', 'pacemaker', 'filename_lr', 'filename_hr'])
        num_di = {'SR': 0, 'AF': 1, 'VA': 2}
        self.afib_df = self.afib_df.replace({'ritmi': num_di})
        bool_di = {False: 0, True: 1}
        self.afib_df = self.afib_df.replace({'validated_by_human': bool_di})
        # add the new column called age_group and apply the above function  
        self.afib_df['age_group'] = self.afib_df['age'].apply(self.get_age_group)

    # add the new column called height_group and apply the above function
        self.afib_df['height_group'] = self.afib_df['height'].apply(self.get_height_group)

    # add the new column called weight_group and apply the above function
        self.afib_df['weight_group'] = self.afib_df['weight'].apply(self.get_weight_group)
        # get year from recording_date
        self.afib_df['recording_year'] = pd.to_datetime(self.afib_df['recording_date']).dt.to_period('Y')
        self.afib_df.to_csv('new_coorteeqsrafva.csv', index=False)